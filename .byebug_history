c
results[name].sort
c
results[name].sort
 results[name].sort
   26:   end
   27: 
   28:   def characters
   29:     @source.xpath("//PERSONA").map { |character| clean_character_name(charact
c
results[name].sort
c
results['MACBETH'].sort
results['MACBETH']
results['MACHBETH']
results
exit
 results[speaker]+= "
 results[speaker][word] += 1
results[speaker] ||= Hash.new(0)
results = Hash.new(0)
results
results[speaker] += 1
results
results[speaker] ||= "Hola"
speaker
results
results[speaker] ||= {}
results
results[speaker] ||= Hash.new(0)
results
results[speaker]
c
results
results[speaker] = 1
speaker
results[speaker][word] = 1
results[speaker][word]
word
c
lines_at_speech.flatten
lines_at_speech
exit
exity
speech
speeach
speaker
c
results.to_a
results
exit
results.sort
results.order
results
exit
exiy
c
results["#{speaker}"] += speech.xpath('LINE').size
results
results["#{speaker}"] += speech.xpath('LINE').size
results
results["#{speaker}"] = speech.xpath('LINE').size
results["#{speaker}"] = speech.xpath('SPEAKER').text
   21:       byebug
=> 22:     end
   23:   end
   24: 
   25:   private
   26: 
(byebug) speaker
"First Witch"
speaker
c
a
c
a.flatten
a
exit
!!
!!!
c
character
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
c
character.scan(/\b[A-Z]+\b/)
character.split(" ")
character
main_characters
c
"sign me up for LUNCH".scan(/(?<!\S)[A-Z]+(?!\S)/)[0]
a
exit
c
ccc
cc
e
character.match(/\b[A-Z]+\b/)
character.scan(/\b[A-Z]+\b/)
character.scan(/(?<!\S)[A-Z]+(?!\S)/)
character.scan(/\b[A-Z]+\b/)
character.scan(/\b[A-Z]+\b/)[0]
character.scan(/(?<!\S)[A-Z]+(?!\S)/)[0]
character.match(/(?<!\S)[A-Z]+(?!\S)/)[0]
character.match(/(?<!\S)[A-Z]+(?!\S)/)
character.scan(/(?<!\S)[A-Z]+(?!\S)/)
character.match(/\p{Upper}/)
   25:   end
   26: end
(byebug) 
c
character.match(/\p{Upper}/)exit
character.match(/\p{Upper}/)
c
@source.xpath("//SPEAKER").map(&:text).uniq - ['ALL']
@source.xpath("//SPEAKER").map(&:text).uniq - ['All']
c
@source.xpath("//SPEAKER").map(&:text).uniq - ['All']
exit
@source.xpath("//SPEAKER").map(&:text).uniq!
@source.xpath("//SPEAKER").map(&:text)
@source.xpath("//SPEAKER")
@source.xpath("//speaker")
@source.xpath("//PERSONA").map(&:text)
@source.xpath("//PERSONA")
c
pgroup_xml.map(&:text)
pgroup_xml
c
@source.xpath('PLAY').xpath('PERSONAE').each {|character| puts character.text}
@source.xpath('PLAY').xpath('PERSONAE').xpath('PERSONA').each {|peo| puts peo.text}
@source.xpath('PLAY').xpath('PERSONAE').xpath('PERSONA').each {|peo| puts peo.title}
@source.xpath('PLAY').xpath('PERSONAE').xpath('PERSONA')
@source.xpath('PLAY').xpath('PERSONAE')
@source.xpath('PLAY')
@source.xpath('PLAY').xpath('PERSONA')
@source.xpath('PLAY')
@source.xpath('play')
@source.play
@source
@source.xpath('play').xpath('personae').xpath('persona').each {|per| puts per}
@source.root.xpath('play').xpath('personae').xpath('persona').each {|per| puts per}
@source.root.xpath('play').xpath('personae').xpath('PERSONA
@source.root.xpath('play').xpath('personae')
@source.root.xpath('PLAY')
@source.root.xpath('PLAY')h
@source.root.xpath('PERSONA').each
@source.root.xpath('persona').each
@source.
@source.root
@source.root.each {|e| puts e}
@source.root.xpath('persona')
@source.root.xpath('PERSONA')
@source.root
@source.size
@source.each {|e| puts e }
@source.first
@source
c
response.read
response
c
subject.list
subject
subjet
c
html.css('a').each {|element| puts element.text }
html.css('a').each {|element| puts element['href'] }
html.css('a').each {|element| puts element }
html.css('a').each {|element| puts element.href }
html.css('a').each {|element| element.href}
html.css('a')
html
c
@html = Nokogiri::XML(document)
@html = Nokogire::XML(document)
self.document
self
